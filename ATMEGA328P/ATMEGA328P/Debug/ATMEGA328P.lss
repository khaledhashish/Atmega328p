
ATMEGA328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000007c6  0000083a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ee  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009dc  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089b  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00002f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000534  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008cf  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  8e:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_CH>:
#include "ADC.h"
#include <math.h>


void ADC_CH(int channelNO){					//method to choose which channel the sensor is connected to
	if (channelNO<8){						//check if valid channel number
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	91 05       	cpc	r25, r1
  9a:	9c f4       	brge	.+38     	; 0xc2 <ADC_CH+0x2c>
	ADMUX = (ADMUX & 0xe0)|channelNO;		//adjust value in ADMUX register to specific channel
  9c:	ec e7       	ldi	r30, 0x7C	; 124
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	90 7e       	andi	r25, 0xE0	; 224
  a4:	98 2b       	or	r25, r24
  a6:	90 83       	st	Z, r25
	DDRC &= ~(1<<channelNO);				//make pin as input
  a8:	47 b1       	in	r20, 0x07	; 7
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	b9 01       	movw	r22, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <ADC_CH+0x20>
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <ADC_CH+0x1c>
  ba:	cb 01       	movw	r24, r22
  bc:	80 95       	com	r24
  be:	84 23       	and	r24, r20
  c0:	87 b9       	out	0x07, r24	; 7
  c2:	08 95       	ret

000000c4 <ADC_Ref>:
	}
}


void ADC_Ref(int Ref){						//choose the reference voltage(internal,external)
	ADMUX = (ADMUX & 0x3f)|(Ref<<6);
  c4:	ec e7       	ldi	r30, 0x7C	; 124
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	20 81       	ld	r18, Z
  ca:	2f 73       	andi	r18, 0x3F	; 63
  cc:	00 24       	eor	r0, r0
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	07 94       	ror	r0
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
  d8:	07 94       	ror	r0
  da:	98 2f       	mov	r25, r24
  dc:	80 2d       	mov	r24, r0
  de:	82 2b       	or	r24, r18
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <ADC_Freq>:
}


void ADC_Freq(int prescaler){				//choose the pre-scaling wanted for calculation
	ADCSRA = (ADCSRA&0x07) |(prescaler);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	90 81       	ld	r25, Z
  ea:	97 70       	andi	r25, 0x07	; 7
  ec:	89 2b       	or	r24, r25
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <ADC_init>:
	
}

void ADC_init(int channelNO,int Ref,int Prescaler){				//method that calls all 3 methods and gives them the values required
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8b 01       	movw	r16, r22
  fc:	ea 01       	movw	r28, r20
	ADC_CH(channelNO);
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_CH>
	ADC_Ref(Ref);
 102:	c8 01       	movw	r24, r16
 104:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_Ref>
	ADC_Freq(Prescaler);
 108:	ce 01       	movw	r24, r28
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Freq>
	ADCSRA |= (1<<ADEN);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <ADC_StartConv>:

void ADC_StartConv(){							//tells the ADC part in controller to read the signal coming from sensor 
	ADCSRA |= (1<<ADSC);
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));				//wait until done reading
 12c:	80 81       	ld	r24, Z
 12e:	84 ff       	sbrs	r24, 4
 130:	fd cf       	rjmp	.-6      	; 0x12c <ADC_StartConv+0xa>
}
 132:	08 95       	ret

00000134 <ADC_read>:

int ADC_read(){									//get the value of reading from stored in register and returns it to be used
	int val = ADCL;
 134:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	val |= (ADCH<<8);	
 138:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return round(val*0.4887585532746823);		//eqution using ref volt=5 => (5/1023) then *100 so the output is 0.488758
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	78 2b       	or	r23, r24
 140:	07 2e       	mov	r0, r23
 142:	00 0c       	add	r0, r0
 144:	88 0b       	sbc	r24, r24
 146:	99 0b       	sbc	r25, r25
 148:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__floatsisf>
 14c:	20 e9       	ldi	r18, 0x90	; 144
 14e:	3e e3       	ldi	r19, 0x3E	; 62
 150:	4a ef       	ldi	r20, 0xFA	; 250
 152:	5e e3       	ldi	r21, 0x3E	; 62
 154:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
 158:	0e 94 2c 03 	call	0x658	; 0x658 <round>
 15c:	0e 94 23 02 	call	0x446	; 0x446 <__fixsfsi>
 160:	cb 01       	movw	r24, r22
 162:	08 95       	ret

00000164 <isPressedB>:




int isPressedB(int pinNumber){				//3 to check input signals
	if(PINB & (1<<pinNumber))return 1;
 164:	23 b1       	in	r18, 0x03	; 3
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	a9 01       	movw	r20, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <isPressedB+0xc>
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <isPressedB+0x8>
 174:	ca 01       	movw	r24, r20
	else return 0;
}
 176:	81 70       	andi	r24, 0x01	; 1
 178:	99 27       	eor	r25, r25
 17a:	08 95       	ret

0000017c <LCD_cmd>:
#define RS 1					//commands pins used by LCD
#define Rw 2
#define en 3

void LCD_cmd(char comm){							//method used to enter LCD command 
	ctrl &= ~(1<<RS);								//rest ctrl pin
 17c:	59 98       	cbi	0x0b, 1	; 11
	LCD_DATA = (LCD_DATA & 0x0F) | (comm & 0xF0);	//send first part of data as I am working 4-bit mode
 17e:	9b b1       	in	r25, 0x0b	; 11
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	28 2f       	mov	r18, r24
 184:	20 7f       	andi	r18, 0xF0	; 240
 186:	92 2b       	or	r25, r18
 188:	9b b9       	out	0x0b, r25	; 11
	ctrl |= 1<<en;									//set en pin
 18a:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	e3 ed       	ldi	r30, 0xD3	; 211
 18e:	f0 e3       	ldi	r31, 0x30	; 48
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_cmd+0x14>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_cmd+0x1a>
 196:	00 00       	nop
	_delay_ms(50);									//wait 50ms
	ctrl &= ~(1<<en);								//reset en pin
 198:	5b 98       	cbi	0x0b, 3	; 11
 19a:	e3 ed       	ldi	r30, 0xD3	; 211
 19c:	f0 e3       	ldi	r31, 0x30	; 48
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_cmd+0x22>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_cmd+0x28>
 1a4:	00 00       	nop
	_delay_ms(50);
	LCD_DATA = (LCD_DATA & 0x0F) | (comm << 4);		//send rest of data
 1a6:	2b b1       	in	r18, 0x0b	; 11
 1a8:	2f 70       	andi	r18, 0x0F	; 15
 1aa:	f0 e1       	ldi	r31, 0x10	; 16
 1ac:	8f 9f       	mul	r24, r31
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	82 2b       	or	r24, r18
 1b4:	8b b9       	out	0x0b, r24	; 11
	ctrl |= 1<<en;
 1b6:	5b 9a       	sbi	0x0b, 3	; 11
 1b8:	83 ed       	ldi	r24, 0xD3	; 211
 1ba:	90 e3       	ldi	r25, 0x30	; 48
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_cmd+0x40>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_cmd+0x46>
 1c2:	00 00       	nop
	_delay_ms(50);
	ctrl &= ~(1<<en);
 1c4:	5b 98       	cbi	0x0b, 3	; 11
 1c6:	08 95       	ret

000001c8 <LCD_Home>:
}

void LCD_Home(){									//return the courser to heme position in LCD 
	LCD_cmd(0x02);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 1ce:	08 95       	ret

000001d0 <LCD_init>:
}

void LCD_init(){						//method that starts the LCD
	LCD_Data_Pins=0xff;					//make the port pins LCD on output
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 1<<en;						//set the 3 pins en,RS & RW
 1d4:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= 1<<RS;
 1d6:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1<<Rw;
 1d8:	22 9a       	sbi	0x04, 2	; 4
	ctrl &= ~(1<<Rw);					//reset Rw
 1da:	5a 98       	cbi	0x0b, 2	; 11
	LCD_cmd(0x02);						//Return home
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 1e2:	87 ea       	ldi	r24, 0xA7	; 167
 1e4:	91 e6       	ldi	r25, 0x61	; 97
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_init+0x16>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_init+0x1c>
 1ec:	00 00       	nop
	_delay_ms(100);
	LCD_cmd(0x28);						//4-bit mode
 1ee:	88 e2       	ldi	r24, 0x28	; 40
 1f0:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 1f4:	87 ea       	ldi	r24, 0xA7	; 167
 1f6:	91 e6       	ldi	r25, 0x61	; 97
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_init+0x28>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_init+0x2e>
 1fe:	00 00       	nop
	_delay_ms(100);
	LCD_cmd(0x01);						//Clear
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 206:	87 ea       	ldi	r24, 0xA7	; 167
 208:	91 e6       	ldi	r25, 0x61	; 97
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_init+0x3a>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_init+0x40>
 210:	00 00       	nop
 212:	87 ea       	ldi	r24, 0xA7	; 167
 214:	91 e6       	ldi	r25, 0x61	; 97
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_init+0x46>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_init+0x4c>
 21c:	00 00       	nop
	_delay_ms(100);
	_delay_ms(100);
	LCD_cmd(0x06);						//increment auto
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 224:	87 ea       	ldi	r24, 0xA7	; 167
 226:	91 e6       	ldi	r25, 0x61	; 97
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_init+0x58>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_init+0x5e>
 22e:	00 00       	nop
	_delay_ms(100);
	LCD_cmd(0x0C);						//Display on, cursor off
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 236:	87 ea       	ldi	r24, 0xA7	; 167
 238:	91 e6       	ldi	r25, 0x61	; 97
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_init+0x6a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_init+0x70>
 240:	00 00       	nop
	_delay_ms(100);
	LCD_cmd(0x80);						//Force cursor to beginning ( 1st line)
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 248:	08 95       	ret

0000024a <LCD_Write>:
}

void LCD_Write(char data){							//method to write a char on the LCD
	ctrl |= 1<<RS;									//set RS pin
 24a:	59 9a       	sbi	0x0b, 1	; 11
	LCD_DATA = (LCD_DATA & 0x0F) | (data & 0xF0);	//send first part of data
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	28 2f       	mov	r18, r24
 252:	20 7f       	andi	r18, 0xF0	; 240
 254:	92 2b       	or	r25, r18
 256:	9b b9       	out	0x0b, r25	; 11
	ctrl |= 1<<en;
 258:	5b 9a       	sbi	0x0b, 3	; 11
 25a:	e3 ed       	ldi	r30, 0xD3	; 211
 25c:	f0 e3       	ldi	r31, 0x30	; 48
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Write+0x14>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_Write+0x1a>
 264:	00 00       	nop
	_delay_ms(50);
	ctrl &= ~(1<<en);
 266:	5b 98       	cbi	0x0b, 3	; 11
 268:	e3 ed       	ldi	r30, 0xD3	; 211
 26a:	f0 e3       	ldi	r31, 0x30	; 48
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Write+0x22>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Write+0x28>
 272:	00 00       	nop
	_delay_ms(50);
	LCD_DATA = (LCD_DATA & 0x0F) | (data << 4);		//send rest of data
 274:	2b b1       	in	r18, 0x0b	; 11
 276:	2f 70       	andi	r18, 0x0F	; 15
 278:	f0 e1       	ldi	r31, 0x10	; 16
 27a:	8f 9f       	mul	r24, r31
 27c:	c0 01       	movw	r24, r0
 27e:	11 24       	eor	r1, r1
 280:	82 2b       	or	r24, r18
 282:	8b b9       	out	0x0b, r24	; 11
	ctrl |= 1<<en;
 284:	5b 9a       	sbi	0x0b, 3	; 11
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	90 e3       	ldi	r25, 0x30	; 48
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_Write+0x40>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_Write+0x46>
 290:	00 00       	nop
	_delay_ms(50);
	ctrl &= ~(1<<en);
 292:	5b 98       	cbi	0x0b, 3	; 11
 294:	08 95       	ret

00000296 <LCD_Write_Str>:
	
}
void LCD_Write_Str(char* data){						//method to write string on LCD(uses char method and while loop)
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	while (*data != '\0'){
 29c:	88 81       	ld	r24, Y
 29e:	88 23       	and	r24, r24
 2a0:	31 f0       	breq	.+12     	; 0x2ae <LCD_Write_Str+0x18>
 2a2:	21 96       	adiw	r28, 0x01	; 1
		LCD_Write(*data);
 2a4:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_Write>
	_delay_ms(50);
	ctrl &= ~(1<<en);
	
}
void LCD_Write_Str(char* data){						//method to write string on LCD(uses char method and while loop)
	while (*data != '\0'){
 2a8:	89 91       	ld	r24, Y+
 2aa:	81 11       	cpse	r24, r1
 2ac:	fb cf       	rjmp	.-10     	; 0x2a4 <LCD_Write_Str+0xe>
		LCD_Write(*data);
		data++;
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <LCD_num>:

void LCD_num(int data){								//method to write integers on LCD
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	28 97       	sbiw	r28, 0x08	; 8
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
	char temp[8];									//create empty string
	itoa(data,temp,10);								//cast integer to string then use string method
 2c8:	4a e0       	ldi	r20, 0x0A	; 10
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	be 01       	movw	r22, r28
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	0e 94 a1 03 	call	0x742	; 0x742 <itoa>
	LCD_Write_Str(temp);
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Write_Str>
}
 2de:	28 96       	adiw	r28, 0x08	; 8
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <update_temp>:
    }
}



void update_temp(int temp){				//This method erases old temp value on LCD and writes new one
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	8c 01       	movw	r16, r24
	LCD_Home();
 2fa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Home>
 2fe:	c5 e0       	ldi	r28, 0x05	; 5
 300:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<5;i++)LCD_cmd(0x14);
 302:	84 e1       	ldi	r24, 0x14	; 20
 304:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 308:	21 97       	sbiw	r28, 0x01	; 1
 30a:	d9 f7       	brne	.-10     	; 0x302 <update_temp+0x12>
	LCD_num(temp);
 30c:	c8 01       	movw	r24, r16
 30e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_num>
	LCD_Write_Str("  ");
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Write_Str>
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <update_RPM>:

void update_RPM(int RPM){			//This method erases old RPM value on LCD and writes new one
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	8c 01       	movw	r16, r24
	LCD_cmd(0xc0);
 32e:	80 ec       	ldi	r24, 0xC0	; 192
 330:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 334:	c5 e0       	ldi	r28, 0x05	; 5
 336:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<5;i++)LCD_cmd(0x14);
 338:	84 e1       	ldi	r24, 0x14	; 20
 33a:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
 33e:	21 97       	sbiw	r28, 0x01	; 1
 340:	d9 f7       	brne	.-10     	; 0x338 <update_RPM+0x14>
	LCD_num(RPM);
 342:	c8 01       	movw	r24, r16
 344:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_num>
	LCD_Write_Str("   ");
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Write_Str>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <main>:
void update_temp(int temp);		//method used to update LCD view
void update_RPM(int rpm);		//method used to update LCD view

int main(void)
{	
	DDRC=0x02;							//define port C (pin 1 out rest in)
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	87 b9       	out	0x07, r24	; 7
	LCD_init();							//initialize LCD
 35e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_init>
	ADC_init(0,1,7);					//initialize ADC on port ADC0 with ref volt(out source) and pre-scaling of 128 to get more accurate reading
 362:	47 e0       	ldi	r20, 0x07	; 7
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_init>
	
	ADC_StartConv();					//tell ADC to convert signal coming from sensor
 372:	0e 94 91 00 	call	0x122	; 0x122 <ADC_StartConv>
	int temp=ADC_read();				//get ADC readings
 376:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_read>
 37a:	6c 01       	movw	r12, r24
	int RPM=765;						//RPM at start
	
	LCD_Write_Str("Temp:");				//Write temp: on the LCD in first line
 37c:	84 e0       	ldi	r24, 0x04	; 4
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Write_Str>
	LCD_cmd(0xc0);						//Go to second line
 384:	80 ec       	ldi	r24, 0xC0	; 192
 386:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_cmd>
	LCD_Write_Str("RPM: ");				//Write RPM: on the LCD in second line
 38a:	8a e0       	ldi	r24, 0x0A	; 10
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_Write_Str>
	
	update_temp(temp);				//Update LCD with the temp value
 392:	c6 01       	movw	r24, r12
 394:	0e 94 78 01 	call	0x2f0	; 0x2f0 <update_temp>
	update_RPM(RPM);				//Update LCD with the RPM value
 398:	8d ef       	ldi	r24, 0xFD	; 253
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	0e 94 92 01 	call	0x324	; 0x324 <update_RPM>
	
	int new_temp;						//If temp changes it will be saved here
	int new_RPM=765;					//If RPM changes it will be saved here
	
	TCCR1A = (1<<WGM10) | (1<<COM1A1);	// Use timer 0 in the PWM mode 
 3a0:	81 e8       	ldi	r24, 0x81	; 129
 3a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |=(1<<CS10);					//zero pre-scaling
 3a6:	e1 e8       	ldi	r30, 0x81	; 129
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	80 83       	st	Z, r24
	OCR1A=150;							//initial PWM for fan speed
 3b0:	86 e9       	ldi	r24, 0x96	; 150
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	update_temp(temp);				//Update LCD with the temp value
	update_RPM(RPM);				//Update LCD with the RPM value
	
	int new_temp;						//If temp changes it will be saved here
	int new_RPM=765;					//If RPM changes it will be saved here
 3bc:	cd ef       	ldi	r28, 0xFD	; 253
 3be:	d2 e0       	ldi	r29, 0x02	; 2
	LCD_init();							//initialize LCD
	ADC_init(0,1,7);					//initialize ADC on port ADC0 with ref volt(out source) and pre-scaling of 128 to get more accurate reading
	
	ADC_StartConv();					//tell ADC to convert signal coming from sensor
	int temp=ADC_read();				//get ADC readings
	int RPM=765;						//RPM at start
 3c0:	0d ef       	ldi	r16, 0xFD	; 253
 3c2:	12 e0       	ldi	r17, 0x02	; 2
		ADC_StartConv();		
		new_temp=ADC_read();		//Read current temp.
		
		if((isPressedB(0))&&(RPM<1300)){					//when pressing the first button the rpm increase by 100
			new_RPM += 76;									//Added value in RPM unit (values between 0-1300)
			OCR1A += 15;									//Added value in PWM (PWM=(RPM*1300)/255) (values between 0-255)
 3c4:	0f 2e       	mov	r0, r31
 3c6:	f8 e8       	ldi	r31, 0x88	; 136
 3c8:	af 2e       	mov	r10, r31
 3ca:	b1 2c       	mov	r11, r1
 3cc:	f0 2d       	mov	r31, r0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <main+0x7a>
 3d0:	67 01       	movw	r12, r14

void update_temp(int temp);		//method used to update LCD view
void update_RPM(int rpm);		//method used to update LCD view

int main(void)
{	
 3d2:	8e 01       	movw	r16, r28
	TCCR1B |=(1<<CS10);					//zero pre-scaling
	OCR1A=150;							//initial PWM for fan speed
    
    while (1) 
    {
		ADC_StartConv();		
 3d4:	0e 94 91 00 	call	0x122	; 0x122 <ADC_StartConv>
		new_temp=ADC_read();		//Read current temp.
 3d8:	0e 94 9a 00 	call	0x134	; 0x134 <ADC_read>
 3dc:	7c 01       	movw	r14, r24
		
		if((isPressedB(0))&&(RPM<1300)){					//when pressing the first button the rpm increase by 100
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 b2 00 	call	0x164	; 0x164 <isPressedB>
 3e6:	89 2b       	or	r24, r25
 3e8:	69 f0       	breq	.+26     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ea:	04 31       	cpi	r16, 0x14	; 20
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	18 07       	cpc	r17, r24
 3f0:	5c f4       	brge	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			new_RPM += 76;									//Added value in RPM unit (values between 0-1300)
 3f2:	c4 5b       	subi	r28, 0xB4	; 180
 3f4:	df 4f       	sbci	r29, 0xFF	; 255
			OCR1A += 15;									//Added value in PWM (PWM=(RPM*1300)/255) (values between 0-255)
 3f6:	f5 01       	movw	r30, r10
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	0f 96       	adiw	r24, 0x0f	; 15
 3fe:	91 83       	std	Z+1, r25	; 0x01
 400:	80 83       	st	Z, r24
 402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 404:	e8 01       	movw	r28, r16
 406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	e8 01       	movw	r28, r16
			}		
		if((isPressedB(2))&&(RPM>0)){						//when pressing the first button the rpm decrease by 100
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 b2 00 	call	0x164	; 0x164 <isPressedB>
 412:	89 2b       	or	r24, r25
 414:	59 f0       	breq	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 416:	10 16       	cp	r1, r16
 418:	11 06       	cpc	r1, r17
 41a:	44 f4       	brge	.+16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			new_RPM -= 76;
 41c:	cc 54       	subi	r28, 0x4C	; 76
 41e:	d1 09       	sbc	r29, r1
			OCR1A -= 15;
 420:	f5 01       	movw	r30, r10
 422:	80 81       	ld	r24, Z
 424:	91 81       	ldd	r25, Z+1	; 0x01
 426:	0f 97       	sbiw	r24, 0x0f	; 15
 428:	91 83       	std	Z+1, r25	; 0x01
 42a:	80 83       	st	Z, r24
			}			
		
		if(new_temp!=temp){				//if temp value changed this method updates the LCD with new values
 42c:	ce 14       	cp	r12, r14
 42e:	df 04       	cpc	r13, r15
 430:	19 f0       	breq	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			update_temp(new_temp);
 432:	c7 01       	movw	r24, r14
 434:	0e 94 78 01 	call	0x2f0	; 0x2f0 <update_temp>
			temp=new_temp;
		}
		if(new_RPM!=RPM){				//if RPM value changed this method updates the LCD with new values
 438:	0c 17       	cp	r16, r28
 43a:	1d 07       	cpc	r17, r29
 43c:	49 f2       	breq	.-110    	; 0x3d0 <main+0x76>
			update_RPM(new_RPM);
 43e:	ce 01       	movw	r24, r28
 440:	0e 94 92 01 	call	0x324	; 0x324 <update_RPM>
 444:	c5 cf       	rjmp	.-118    	; 0x3d0 <main+0x76>

00000446 <__fixsfsi>:
 446:	0e 94 2a 02 	call	0x454	; 0x454 <__fixunssfsi>
 44a:	68 94       	set
 44c:	b1 11       	cpse	r27, r1
 44e:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>
 452:	08 95       	ret

00000454 <__fixunssfsi>:
 454:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_splitA>
 458:	88 f0       	brcs	.+34     	; 0x47c <__fixunssfsi+0x28>
 45a:	9f 57       	subi	r25, 0x7F	; 127
 45c:	98 f0       	brcs	.+38     	; 0x484 <__fixunssfsi+0x30>
 45e:	b9 2f       	mov	r27, r25
 460:	99 27       	eor	r25, r25
 462:	b7 51       	subi	r27, 0x17	; 23
 464:	b0 f0       	brcs	.+44     	; 0x492 <__fixunssfsi+0x3e>
 466:	e1 f0       	breq	.+56     	; 0x4a0 <__fixunssfsi+0x4c>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	1a f0       	brmi	.+6      	; 0x478 <__fixunssfsi+0x24>
 472:	ba 95       	dec	r27
 474:	c9 f7       	brne	.-14     	; 0x468 <__fixunssfsi+0x14>
 476:	14 c0       	rjmp	.+40     	; 0x4a0 <__fixunssfsi+0x4c>
 478:	b1 30       	cpi	r27, 0x01	; 1
 47a:	91 f0       	breq	.+36     	; 0x4a0 <__fixunssfsi+0x4c>
 47c:	0e 94 b8 02 	call	0x570	; 0x570 <__fp_zero>
 480:	b1 e0       	ldi	r27, 0x01	; 1
 482:	08 95       	ret
 484:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_zero>
 488:	67 2f       	mov	r22, r23
 48a:	78 2f       	mov	r23, r24
 48c:	88 27       	eor	r24, r24
 48e:	b8 5f       	subi	r27, 0xF8	; 248
 490:	39 f0       	breq	.+14     	; 0x4a0 <__fixunssfsi+0x4c>
 492:	b9 3f       	cpi	r27, 0xF9	; 249
 494:	cc f3       	brlt	.-14     	; 0x488 <__fixunssfsi+0x34>
 496:	86 95       	lsr	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	b3 95       	inc	r27
 49e:	d9 f7       	brne	.-10     	; 0x496 <__fixunssfsi+0x42>
 4a0:	3e f4       	brtc	.+14     	; 0x4b0 <__fixunssfsi+0x5c>
 4a2:	90 95       	com	r25
 4a4:	80 95       	com	r24
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__floatunsisf>:
 4b2:	e8 94       	clt
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__floatsisf+0x12>

000004b6 <__floatsisf>:
 4b6:	97 fb       	bst	r25, 7
 4b8:	3e f4       	brtc	.+14     	; 0x4c8 <__floatsisf+0x12>
 4ba:	90 95       	com	r25
 4bc:	80 95       	com	r24
 4be:	70 95       	com	r23
 4c0:	61 95       	neg	r22
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	8f 4f       	sbci	r24, 0xFF	; 255
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	99 23       	and	r25, r25
 4ca:	a9 f0       	breq	.+42     	; 0x4f6 <__floatsisf+0x40>
 4cc:	f9 2f       	mov	r31, r25
 4ce:	96 e9       	ldi	r25, 0x96	; 150
 4d0:	bb 27       	eor	r27, r27
 4d2:	93 95       	inc	r25
 4d4:	f6 95       	lsr	r31
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f1 11       	cpse	r31, r1
 4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <__floatsisf+0x1c>
 4e2:	fa f4       	brpl	.+62     	; 0x522 <__floatsisf+0x6c>
 4e4:	bb 0f       	add	r27, r27
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__floatsisf+0x36>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	1b c0       	rjmp	.+54     	; 0x522 <__floatsisf+0x6c>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	16 c0       	rjmp	.+44     	; 0x522 <__floatsisf+0x6c>
 4f6:	88 23       	and	r24, r24
 4f8:	11 f0       	breq	.+4      	; 0x4fe <__floatsisf+0x48>
 4fa:	96 e9       	ldi	r25, 0x96	; 150
 4fc:	11 c0       	rjmp	.+34     	; 0x520 <__floatsisf+0x6a>
 4fe:	77 23       	and	r23, r23
 500:	21 f0       	breq	.+8      	; 0x50a <__floatsisf+0x54>
 502:	9e e8       	ldi	r25, 0x8E	; 142
 504:	87 2f       	mov	r24, r23
 506:	76 2f       	mov	r23, r22
 508:	05 c0       	rjmp	.+10     	; 0x514 <__floatsisf+0x5e>
 50a:	66 23       	and	r22, r22
 50c:	71 f0       	breq	.+28     	; 0x52a <__floatsisf+0x74>
 50e:	96 e8       	ldi	r25, 0x86	; 134
 510:	86 2f       	mov	r24, r22
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	2a f0       	brmi	.+10     	; 0x522 <__floatsisf+0x6c>
 518:	9a 95       	dec	r25
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	da f7       	brpl	.-10     	; 0x518 <__floatsisf+0x62>
 522:	88 0f       	add	r24, r24
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	97 f9       	bld	r25, 7
 52a:	08 95       	ret

0000052c <__fp_split3>:
 52c:	57 fd       	sbrc	r21, 7
 52e:	90 58       	subi	r25, 0x80	; 128
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	59 f0       	breq	.+22     	; 0x54c <__fp_splitA+0x10>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	71 f0       	breq	.+28     	; 0x556 <__fp_splitA+0x1a>
 53a:	47 95       	ror	r20

0000053c <__fp_splitA>:
 53c:	88 0f       	add	r24, r24
 53e:	97 fb       	bst	r25, 7
 540:	99 1f       	adc	r25, r25
 542:	61 f0       	breq	.+24     	; 0x55c <__fp_splitA+0x20>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	79 f0       	breq	.+30     	; 0x566 <__fp_splitA+0x2a>
 548:	87 95       	ror	r24
 54a:	08 95       	ret
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	55 1f       	adc	r21, r21
 554:	f2 cf       	rjmp	.-28     	; 0x53a <__fp_split3+0xe>
 556:	46 95       	lsr	r20
 558:	f1 df       	rcall	.-30     	; 0x53c <__fp_splitA>
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__fp_splitA+0x30>
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	99 1f       	adc	r25, r25
 564:	f1 cf       	rjmp	.-30     	; 0x548 <__fp_splitA+0xc>
 566:	86 95       	lsr	r24
 568:	71 05       	cpc	r23, r1
 56a:	61 05       	cpc	r22, r1
 56c:	08 94       	sec
 56e:	08 95       	ret

00000570 <__fp_zero>:
 570:	e8 94       	clt

00000572 <__fp_szero>:
 572:	bb 27       	eor	r27, r27
 574:	66 27       	eor	r22, r22
 576:	77 27       	eor	r23, r23
 578:	cb 01       	movw	r24, r22
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret

0000057e <__mulsf3>:
 57e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__mulsf3x>
 582:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 586:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 58a:	38 f0       	brcs	.+14     	; 0x59a <__mulsf3+0x1c>
 58c:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 590:	20 f0       	brcs	.+8      	; 0x59a <__mulsf3+0x1c>
 592:	95 23       	and	r25, r21
 594:	11 f0       	breq	.+4      	; 0x59a <__mulsf3+0x1c>
 596:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 59a:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 59e:	11 24       	eor	r1, r1
 5a0:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>

000005a4 <__mulsf3x>:
 5a4:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_split3>
 5a8:	70 f3       	brcs	.-36     	; 0x586 <__mulsf3+0x8>

000005aa <__mulsf3_pse>:
 5aa:	95 9f       	mul	r25, r21
 5ac:	c1 f3       	breq	.-16     	; 0x59e <__mulsf3+0x20>
 5ae:	95 0f       	add	r25, r21
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	55 1f       	adc	r21, r21
 5b4:	62 9f       	mul	r22, r18
 5b6:	f0 01       	movw	r30, r0
 5b8:	72 9f       	mul	r23, r18
 5ba:	bb 27       	eor	r27, r27
 5bc:	f0 0d       	add	r31, r0
 5be:	b1 1d       	adc	r27, r1
 5c0:	63 9f       	mul	r22, r19
 5c2:	aa 27       	eor	r26, r26
 5c4:	f0 0d       	add	r31, r0
 5c6:	b1 1d       	adc	r27, r1
 5c8:	aa 1f       	adc	r26, r26
 5ca:	64 9f       	mul	r22, r20
 5cc:	66 27       	eor	r22, r22
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	66 1f       	adc	r22, r22
 5d4:	82 9f       	mul	r24, r18
 5d6:	22 27       	eor	r18, r18
 5d8:	b0 0d       	add	r27, r0
 5da:	a1 1d       	adc	r26, r1
 5dc:	62 1f       	adc	r22, r18
 5de:	73 9f       	mul	r23, r19
 5e0:	b0 0d       	add	r27, r0
 5e2:	a1 1d       	adc	r26, r1
 5e4:	62 1f       	adc	r22, r18
 5e6:	83 9f       	mul	r24, r19
 5e8:	a0 0d       	add	r26, r0
 5ea:	61 1d       	adc	r22, r1
 5ec:	22 1f       	adc	r18, r18
 5ee:	74 9f       	mul	r23, r20
 5f0:	33 27       	eor	r19, r19
 5f2:	a0 0d       	add	r26, r0
 5f4:	61 1d       	adc	r22, r1
 5f6:	23 1f       	adc	r18, r19
 5f8:	84 9f       	mul	r24, r20
 5fa:	60 0d       	add	r22, r0
 5fc:	21 1d       	adc	r18, r1
 5fe:	82 2f       	mov	r24, r18
 600:	76 2f       	mov	r23, r22
 602:	6a 2f       	mov	r22, r26
 604:	11 24       	eor	r1, r1
 606:	9f 57       	subi	r25, 0x7F	; 127
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	9a f0       	brmi	.+38     	; 0x632 <__mulsf3_pse+0x88>
 60c:	f1 f0       	breq	.+60     	; 0x64a <__mulsf3_pse+0xa0>
 60e:	88 23       	and	r24, r24
 610:	4a f0       	brmi	.+18     	; 0x624 <__mulsf3_pse+0x7a>
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	bb 1f       	adc	r27, r27
 618:	66 1f       	adc	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	91 50       	subi	r25, 0x01	; 1
 620:	50 40       	sbci	r21, 0x00	; 0
 622:	a9 f7       	brne	.-22     	; 0x60e <__mulsf3_pse+0x64>
 624:	9e 3f       	cpi	r25, 0xFE	; 254
 626:	51 05       	cpc	r21, r1
 628:	80 f0       	brcs	.+32     	; 0x64a <__mulsf3_pse+0xa0>
 62a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 62e:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>
 632:	5f 3f       	cpi	r21, 0xFF	; 255
 634:	e4 f3       	brlt	.-8      	; 0x62e <__mulsf3_pse+0x84>
 636:	98 3e       	cpi	r25, 0xE8	; 232
 638:	d4 f3       	brlt	.-12     	; 0x62e <__mulsf3_pse+0x84>
 63a:	86 95       	lsr	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b7 95       	ror	r27
 642:	f7 95       	ror	r31
 644:	e7 95       	ror	r30
 646:	9f 5f       	subi	r25, 0xFF	; 255
 648:	c1 f7       	brne	.-16     	; 0x63a <__mulsf3_pse+0x90>
 64a:	fe 2b       	or	r31, r30
 64c:	88 0f       	add	r24, r24
 64e:	91 1d       	adc	r25, r1
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret

00000658 <round>:
 658:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_splitA>
 65c:	e8 f0       	brcs	.+58     	; 0x698 <round+0x40>
 65e:	9e 37       	cpi	r25, 0x7E	; 126
 660:	e8 f0       	brcs	.+58     	; 0x69c <round+0x44>
 662:	96 39       	cpi	r25, 0x96	; 150
 664:	b8 f4       	brcc	.+46     	; 0x694 <round+0x3c>
 666:	9e 38       	cpi	r25, 0x8E	; 142
 668:	48 f4       	brcc	.+18     	; 0x67c <round+0x24>
 66a:	67 2f       	mov	r22, r23
 66c:	78 2f       	mov	r23, r24
 66e:	88 27       	eor	r24, r24
 670:	98 5f       	subi	r25, 0xF8	; 248
 672:	f9 cf       	rjmp	.-14     	; 0x666 <round+0xe>
 674:	86 95       	lsr	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	93 95       	inc	r25
 67c:	95 39       	cpi	r25, 0x95	; 149
 67e:	d0 f3       	brcs	.-12     	; 0x674 <round+0x1c>
 680:	b6 2f       	mov	r27, r22
 682:	b1 70       	andi	r27, 0x01	; 1
 684:	6b 0f       	add	r22, r27
 686:	71 1d       	adc	r23, r1
 688:	81 1d       	adc	r24, r1
 68a:	20 f4       	brcc	.+8      	; 0x694 <round+0x3c>
 68c:	87 95       	ror	r24
 68e:	77 95       	ror	r23
 690:	67 95       	ror	r22
 692:	93 95       	inc	r25
 694:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_mintl>
 698:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_mpack>
 69c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__fp_szero>

000006a0 <__fp_inf>:
 6a0:	97 f9       	bld	r25, 7
 6a2:	9f 67       	ori	r25, 0x7F	; 127
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__fp_mintl>:
 6ac:	88 23       	and	r24, r24
 6ae:	71 f4       	brne	.+28     	; 0x6cc <__fp_mintl+0x20>
 6b0:	77 23       	and	r23, r23
 6b2:	21 f0       	breq	.+8      	; 0x6bc <__fp_mintl+0x10>
 6b4:	98 50       	subi	r25, 0x08	; 8
 6b6:	87 2b       	or	r24, r23
 6b8:	76 2f       	mov	r23, r22
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <__fp_mintl+0x1e>
 6bc:	66 23       	and	r22, r22
 6be:	11 f4       	brne	.+4      	; 0x6c4 <__fp_mintl+0x18>
 6c0:	99 27       	eor	r25, r25
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <__fp_mintl+0x32>
 6c4:	90 51       	subi	r25, 0x10	; 16
 6c6:	86 2b       	or	r24, r22
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	2a f0       	brmi	.+10     	; 0x6d8 <__fp_mintl+0x2c>
 6ce:	9a 95       	dec	r25
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	da f7       	brpl	.-10     	; 0x6ce <__fp_mintl+0x22>
 6d8:	88 0f       	add	r24, r24
 6da:	96 95       	lsr	r25
 6dc:	87 95       	ror	r24
 6de:	97 f9       	bld	r25, 7
 6e0:	08 95       	ret

000006e2 <__fp_mpack>:
 6e2:	9f 3f       	cpi	r25, 0xFF	; 255
 6e4:	31 f0       	breq	.+12     	; 0x6f2 <__fp_mpack_finite+0xc>

000006e6 <__fp_mpack_finite>:
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	20 f4       	brcc	.+8      	; 0x6f2 <__fp_mpack_finite+0xc>
 6ea:	87 95       	ror	r24
 6ec:	77 95       	ror	r23
 6ee:	67 95       	ror	r22
 6f0:	b7 95       	ror	r27
 6f2:	88 0f       	add	r24, r24
 6f4:	91 1d       	adc	r25, r1
 6f6:	96 95       	lsr	r25
 6f8:	87 95       	ror	r24
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <__fp_nan>:
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	80 ec       	ldi	r24, 0xC0	; 192
 702:	08 95       	ret

00000704 <__fp_pscA>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	18 06       	cpc	r1, r24
 70e:	09 06       	cpc	r0, r25
 710:	08 95       	ret

00000712 <__fp_pscB>:
 712:	00 24       	eor	r0, r0
 714:	0a 94       	dec	r0
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	14 06       	cpc	r1, r20
 71c:	05 06       	cpc	r0, r21
 71e:	08 95       	ret

00000720 <__fp_round>:
 720:	09 2e       	mov	r0, r25
 722:	03 94       	inc	r0
 724:	00 0c       	add	r0, r0
 726:	11 f4       	brne	.+4      	; 0x72c <__fp_round+0xc>
 728:	88 23       	and	r24, r24
 72a:	52 f0       	brmi	.+20     	; 0x740 <__fp_round+0x20>
 72c:	bb 0f       	add	r27, r27
 72e:	40 f4       	brcc	.+16     	; 0x740 <__fp_round+0x20>
 730:	bf 2b       	or	r27, r31
 732:	11 f4       	brne	.+4      	; 0x738 <__fp_round+0x18>
 734:	60 ff       	sbrs	r22, 0
 736:	04 c0       	rjmp	.+8      	; 0x740 <__fp_round+0x20>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <itoa>:
 742:	45 32       	cpi	r20, 0x25	; 37
 744:	51 05       	cpc	r21, r1
 746:	20 f4       	brcc	.+8      	; 0x750 <itoa+0xe>
 748:	42 30       	cpi	r20, 0x02	; 2
 74a:	10 f0       	brcs	.+4      	; 0x750 <itoa+0xe>
 74c:	0c 94 ac 03 	jmp	0x758	; 0x758 <__itoa_ncheck>
 750:	fb 01       	movw	r30, r22
 752:	10 82       	st	Z, r1
 754:	cb 01       	movw	r24, r22
 756:	08 95       	ret

00000758 <__itoa_ncheck>:
 758:	bb 27       	eor	r27, r27
 75a:	4a 30       	cpi	r20, 0x0A	; 10
 75c:	31 f4       	brne	.+12     	; 0x76a <__itoa_ncheck+0x12>
 75e:	99 23       	and	r25, r25
 760:	22 f4       	brpl	.+8      	; 0x76a <__itoa_ncheck+0x12>
 762:	bd e2       	ldi	r27, 0x2D	; 45
 764:	90 95       	com	r25
 766:	81 95       	neg	r24
 768:	9f 4f       	sbci	r25, 0xFF	; 255
 76a:	0c 94 b8 03 	jmp	0x770	; 0x770 <__utoa_common>

0000076e <__utoa_ncheck>:
 76e:	bb 27       	eor	r27, r27

00000770 <__utoa_common>:
 770:	fb 01       	movw	r30, r22
 772:	55 27       	eor	r21, r21
 774:	aa 27       	eor	r26, r26
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	aa 1f       	adc	r26, r26
 77c:	a4 17       	cp	r26, r20
 77e:	10 f0       	brcs	.+4      	; 0x784 <__utoa_common+0x14>
 780:	a4 1b       	sub	r26, r20
 782:	83 95       	inc	r24
 784:	50 51       	subi	r21, 0x10	; 16
 786:	b9 f7       	brne	.-18     	; 0x776 <__utoa_common+0x6>
 788:	a0 5d       	subi	r26, 0xD0	; 208
 78a:	aa 33       	cpi	r26, 0x3A	; 58
 78c:	08 f0       	brcs	.+2      	; 0x790 <__utoa_common+0x20>
 78e:	a9 5d       	subi	r26, 0xD9	; 217
 790:	a1 93       	st	Z+, r26
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	79 f7       	brne	.-34     	; 0x774 <__utoa_common+0x4>
 796:	b1 11       	cpse	r27, r1
 798:	b1 93       	st	Z+, r27
 79a:	11 92       	st	Z+, r1
 79c:	cb 01       	movw	r24, r22
 79e:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <strrev>

000007a2 <strrev>:
 7a2:	dc 01       	movw	r26, r24
 7a4:	fc 01       	movw	r30, r24
 7a6:	67 2f       	mov	r22, r23
 7a8:	71 91       	ld	r23, Z+
 7aa:	77 23       	and	r23, r23
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <strrev+0x4>
 7ae:	32 97       	sbiw	r30, 0x02	; 2
 7b0:	04 c0       	rjmp	.+8      	; 0x7ba <strrev+0x18>
 7b2:	7c 91       	ld	r23, X
 7b4:	6d 93       	st	X+, r22
 7b6:	70 83       	st	Z, r23
 7b8:	62 91       	ld	r22, -Z
 7ba:	ae 17       	cp	r26, r30
 7bc:	bf 07       	cpc	r27, r31
 7be:	c8 f3       	brcs	.-14     	; 0x7b2 <strrev+0x10>
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
